@section Styles {
    <link rel="stylesheet" href="~/css/user.css" />
}


@{
    ViewData["Title"] = "Home Page";

}

<style>
    /* Set the size of the div element that contains the map */
    #map {
        height: 100%;
    }

    /* Optional: Makes the sample page fill the window. */
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }
</style>


<br />
<div class="row">
    <div class="col-2 leftlogodiv">
        <figure class="imageDivLeft">
            <img class="img-fluid logo" src="/assets/vetrs.png" alt="Soldier on knees with big backpack and carrying rifle.">
        </figure>
    </div>
    <div class="col-8">
        <p class="text-center customFont stretchVetRS">VetRS</p>
        
    </div>
    <div class="col-2">
        <figure class="imageDivRight">
            <img class="img-fluid logo" src="/assets/SoldierSalutingFlag-300x175.jpg" alt="Soldier saluting flag with big flag background.">
        </figure>
    </div>
</div>
<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=@VetRS.APIKeys.GoogleMapsKey&callback=initAutocomplete&libraries=places&v=weekly"
        defer></script>

@*<form class="form-inline my-2 my-lg-0 justify-content-center">
        <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
        <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
    </form>*@
<br />
<hr />
<br />
<br />


<style type="text/css">
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 400px;
    }

    /* Optional: Makes the sample page fill the window. */
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }
</style>
<script>
    // This example adds a search box to a map, using the Google Place Autocomplete
    // feature. People can enter geographical searches. The search box will return a
    // pick list containing a mix of places and predicted search terms.
    // This example requires the Places library. Include the libraries=places
    // parameter when you first load the API. For example:
    // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
    function initAutocomplete() {
        const map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: 43.0389, lng: -87.9065 },
            zoom: 13,
            mapTypeId: "roadmap",
        });
        // Create the search box and link it to the UI element.
        const input = document.getElementById("pac-input");
        const searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        // Bias the SearchBox results towards current map's viewport.
        map.addListener("bounds_changed", () => {
            searchBox.setBounds(map.getBounds());
        });
        let markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener("places_changed", () => {
            const places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }
            // Clear out the old markers.
            markers.forEach((marker) => {
                marker.setMap(null);
            });
            markers = [];
            // For each place, get the icon, name and location.
            const bounds = new google.maps.LatLngBounds();
            places.forEach((place) => {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                const icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25),
                };
                // Create a marker for each place.
                markers.push(
                    new google.maps.Marker({
                        map,
                        icon,
                        title: place.name,
                        position: place.geometry.location,
                    })
                );

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });
        var latLng = { lat: 43.066527, lng: -87.914071 };
        var marker = new google.maps.Marker({ position: latLng, map: map });
        marker.setMap(map);
        latLng = { lat: 43.061505, lng: -87.91849 };
        var marker2 = new google.maps.Marker({ position: latLng, map: map });
        marker2.setMap(map);
        latLng = { lat: 43.0343, lng: -87.9116 };
        var marker3 = new google.maps.Marker({ position: latLng, map: map });
        marker3.setMap(map);
        latLng = { lat: 43.0783, lng: -87.8820 };
        var marker4 = new google.maps.Marker({ position: latLng, map: map });
        marker4.setMap(map);
    }
</script>

<body>
    <input id="pac-input"
           class="controls"
           type="text"
           placeholder="Search Box" />
    <div id="map"></div>
</body>

@*<script>
        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:



        function initMap() {
            var uluru = { lat: 43.0389, lng: -87.9065 };
            // The map, centered at Uluru
            var map = new google.maps.Map(
                document.getElementById('map'), { zoom: 13, center: uluru });
            // The marker, positioned at Uluru

            var latLng = { lat: 43.066527, lng: -87.914071 };
            var marker = new google.maps.Marker({ position: latLng, map: map });
            marker.setMap(map);
            latLng = { lat: 43.061505, lng: -87.91849 };
            var marker2 = new google.maps.Marker({ position: latLng, map: map });
            marker2.setMap(map);
            latLng = { lat: 43.0343, lng: -87.9116 };
            var marker3 = new google.maps.Marker({ position: latLng, map: map });
            marker3.setMap(map);
            latLng = { lat: 43.0783, lng: -87.8820 };
            var marker4 = new google.maps.Marker({ position: latLng, map: map });
            marker4.setMap(map);
        });
        const request = {
            query: "Museum of Contemporary Art Australia",
            fields: ["name", "geometry"],
        };
        service = new google.maps.places.PlacesService(map);
        service.findPlaceFromQuery(request, (results, status) => {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
                for (let i = 0; i < results.length; i++) {
                    createMarker(results[i]);
                }
                map.setCenter(results[0].geometry.location);
            }
        });
        }

        function createMarker(place) {
            const marker = new google.maps.Marker({
                map,
                position: place.geometry.location,
            });
            google.maps.event.addListener(marker, "click", () => {
                infowindow.setContent(place.name);
                infowindow.open(map);
            });
        }
    </script>*@




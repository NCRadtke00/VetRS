// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetRS.Data;

namespace VetRS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "87001671-e8a0-414c-b1ae-48c03607a893",
                            ConcurrencyStamp = "e578b99d-57e1-4f99-bea7-421b8f8c21f9",
                            Name = "Veteran",
                            NormalizedName = "VETERAN"
                        },
                        new
                        {
                            Id = "71c46ce9-cffa-4c4c-a16e-36582e445b8e",
                            ConcurrencyStamp = "e8c2a210-cfcb-4fe6-aec2-46de1c4d23b4",
                            Name = "VSO",
                            NormalizedName = "VSO"
                        },
                        new
                        {
                            Id = "78d309cf-d4e1-48c0-8887-b5d236d5199b",
                            ConcurrencyStamp = "0547d278-79e5-40d2-bc67-f140e46d681a",
                            Name = "Education Rep.",
                            NormalizedName = "EDUCATION REP"
                        },
                        new
                        {
                            Id = "0bdbbcca-16de-4b40-bf7e-b6e0e1e0f46b",
                            ConcurrencyStamp = "62d7c161-b75b-43fb-abc5-b897c4bb47ce",
                            Name = "Employer",
                            NormalizedName = "EMPLOYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VetRS.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EducationCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationZipCode")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramImageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Education");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EducationCity = "Milwaukee",
                            EducationState = "Wisconsin",
                            EducationStreet = "Mitchell St.",
                            EducationZipCode = 53215,
                            Email = "BigGuy@comcast.net",
                            FirstName = "Bobby",
                            ImageLocation = "",
                            LastName = "Knight",
                            Lat = 43.012317000000003,
                            Long = -87.955793999999997,
                            PhoneNumber = "2228389992",
                            ProgramBio = "Wisconsin's Premier Educational State Institution",
                            ProgramImageLocation = "",
                            ProgramName = "University of Wisconsin"
                        },
                        new
                        {
                            Id = 2,
                            EducationCity = "Milwaukee",
                            EducationState = "Wisconsin",
                            EducationStreet = "700 W. State Street",
                            EducationZipCode = 53233,
                            Email = "RuReady@comcast.net",
                            FirstName = "Mitch",
                            ImageLocation = "",
                            LastName = "Holcomb",
                            Lat = 43.043551000000001,
                            Long = -87.921150999999995,
                            PhoneNumber = "9392244234",
                            ProgramBio = "Education that transforms lives, industry, and community.",
                            ProgramImageLocation = "",
                            ProgramName = "Milwaukee Area Technical College"
                        },
                        new
                        {
                            Id = 3,
                            EducationCity = "Milwaukee",
                            EducationState = "Wisconsin",
                            EducationStreet = "6801 N. Yates Road",
                            EducationZipCode = 53217,
                            Email = "ShellieN19@gmail.com",
                            FirstName = "Sheila",
                            ImageLocation = "",
                            LastName = "Williams",
                            Lat = 43.140320000000003,
                            Long = -87.907152999999994,
                            PhoneNumber = "8003478822",
                            ProgramBio = "Stritch's story is integrated with more than 38,000 of our alumni who are positively impacting the communities in which they live, work, serve, and lead.",
                            ProgramImageLocation = "",
                            ProgramName = "Cardinal Stritch University"
                        },
                        new
                        {
                            Id = 4,
                            EducationCity = "Milwaukee",
                            EducationState = "Wisconsin",
                            EducationStreet = "313 N Plankinton Ave Suite 209",
                            EducationZipCode = 53203,
                            Email = "Wendydev13@comcast.net",
                            FirstName = "Wendy",
                            ImageLocation = "",
                            LastName = "Knight",
                            Lat = 43.034196000000001,
                            Long = -87.912329999999997,
                            PhoneNumber = "4145330639",
                            ProgramBio = "devCodeCamp has been awarded 'Best Coding Bootcamp' by Course Report each year 2016-2020",
                            ProgramImageLocation = "",
                            ProgramName = "devCodeCamp"
                        },
                        new
                        {
                            Id = 5,
                            EducationCity = "Milwaukee",
                            EducationState = "Wisconsin",
                            EducationStreet = "Mellencamp Hall, Room 168A, P.O. Box 469",
                            EducationZipCode = 53211,
                            Email = "vets@uwm.edu",
                            FirstName = "James",
                            ImageLocation = "",
                            LastName = "Schmidt",
                            Lat = 43.074987999999998,
                            Long = -87.879599999999996,
                            PhoneNumber = "4142296627",
                            ProgramBio = "Wisconsin's Premier Educational State Institution",
                            ProgramImageLocation = "",
                            ProgramName = "University of Wisconsin - Milwaukee"
                        });
                });

            modelBuilder.Entity("VetRS.Models.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyImageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyZipCode")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Employer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyBio = "Manufacturer of craft beers and craft gourmet sodas; retail shop, tap room, local entertainment venue",
                            CompanyCity = "Glendale",
                            CompanyImageLocation = "https://www.sprecherbrewery.com/wp-content/uploads/2020/06/Re_Fresh_500x500.jpg",
                            CompanyName = "Sprecher Brewing Co. Inc.",
                            CompanyState = "Wisconsin",
                            CompanyStreet = "701 W. Glendale Ave.",
                            CompanyUrl = "sprecherbrewery.com",
                            CompanyZipCode = 53209,
                            Email = "ThisAintNoReggie92@Sprecher.com",
                            FirstName = "Reggie",
                            ImageLocation = "",
                            LastName = "White",
                            Lat = 43.099649999999997,
                            Long = -87.919820000000001,
                            PhoneNumber = "4149647837",
                            Rating = 5
                        },
                        new
                        {
                            Id = 2,
                            CompanyBio = "Training for small business owners and their team, workshops focus on teaching the skills and tools to a business by the numbers",
                            CompanyCity = "Waukesha",
                            CompanyImageLocation = "",
                            CompanyName = "EWH Small Business Accounting SC",
                            CompanyState = "Wisconsin",
                            CompanyStreet = "20670 Watertown Rd.",
                            CompanyUrl = "ewhsba.com",
                            CompanyZipCode = 53186,
                            Email = "Roy@EWH.com",
                            FirstName = "LeRoy",
                            ImageLocation = "",
                            LastName = "Butler",
                            Lat = 43.038780000000003,
                            Long = 88.169669999999996,
                            PhoneNumber = "262-796-1040",
                            Rating = 4
                        },
                        new
                        {
                            Id = 3,
                            CompanyBio = "Staffing, recruitment search firm specializing in areas of financial, manufacturing, health care, telecom, IT, engineering, human resources, and sales and marketing",
                            CompanyCity = "Brookfield",
                            CompanyImageLocation = "",
                            CompanyName = "Elite Human Capital Group",
                            CompanyState = "Wisconsin",
                            CompanyStreet = "155 S. Executive Dr.",
                            CompanyUrl = "elitehumancapital.com",
                            CompanyZipCode = 53005,
                            Email = "TDBob@EHCG.com",
                            FirstName = "Robert",
                            ImageLocation = "",
                            LastName = "Brooks",
                            Lat = 43.030954000000001,
                            Long = -88.115035000000006,
                            PhoneNumber = "2627850900",
                            Rating = 4
                        },
                        new
                        {
                            Id = 4,
                            CompanyBio = "Law firm specializes in representation of commercial creditors in any respect and legal environment, both secured and unsecured; business clients utilize services to promote, protect interests as creditors in the state and country.",
                            CompanyCity = "Milwaukee",
                            CompanyImageLocation = "https://kmksc.com/wp-content/themes/kmk/images/KMK-Logo-Round.png",
                            CompanyName = "Kohner, Mann & Kailas SC",
                            CompanyState = "Wisconsin",
                            CompanyStreet = "4650 N. Port Washington Rd",
                            CompanyUrl = "kmksc.com",
                            CompanyZipCode = 53212,
                            Email = "4x1xChamp@KMK.com",
                            FirstName = "Don",
                            ImageLocation = "",
                            LastName = "Beebe",
                            Lat = 43.100909999999999,
                            Long = -87.91516,
                            PhoneNumber = "4149625110",
                            Rating = 5
                        },
                        new
                        {
                            Id = 5,
                            CompanyBio = "Firm designs/constructs industrial, retail, commercial and institution buildings for projects throughout SE Wisconsin; approximately 30 major projects a year; also select project division for renovation and repair projects",
                            CompanyCity = "Oconomowoc",
                            CompanyImageLocation = "",
                            CompanyName = "MSI General Corp.",
                            CompanyState = "Wisconsin",
                            CompanyStreet = "P.O. Box 7",
                            CompanyUrl = "msigeneral.com",
                            CompanyZipCode = 53066,
                            Email = "89BigC@GPBalum.com",
                            FirstName = "Mark",
                            ImageLocation = "",
                            LastName = "Chmura",
                            Lat = 43.099159999999998,
                            Long = -88.498069999999998,
                            PhoneNumber = "2623673661",
                            Rating = 5
                        });
                });

            modelBuilder.Entity("VetRS.Models.MilitaryJobTranslator", b =>
                {
                    b.Property<string>("MilitarySpecialtyNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CivilianJobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MilitaryJobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MilitarySpecialtyNumber");

                    b.ToTable("MilitaryJobsTranslator");

                    b.HasData(
                        new
                        {
                            MilitarySpecialtyNumber = "3531",
                            CivilianJobTitle = "Truck Driver",
                            MilitaryJobTitle = "Motor Vehicle Operator"
                        },
                        new
                        {
                            MilitarySpecialtyNumber = "8411",
                            CivilianJobTitle = "Human Resource Specialist",
                            MilitaryJobTitle = "Recruiter"
                        },
                        new
                        {
                            MilitarySpecialtyNumber = "25B",
                            CivilianJobTitle = "Computer and Information System Manager",
                            MilitaryJobTitle = "Information Technology Specialist"
                        },
                        new
                        {
                            MilitarySpecialtyNumber = "4N0",
                            CivilianJobTitle = "Emergency Medical Technician",
                            MilitaryJobTitle = "Aerospace Medical Services"
                        },
                        new
                        {
                            MilitarySpecialtyNumber = "4T0",
                            CivilianJobTitle = "Clinical Laboratory Technologist",
                            MilitaryJobTitle = "Medical Laboratory Specialist"
                        });
                });

            modelBuilder.Entity("VetRS.Models.VSO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("VSOCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VSOState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VSOStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VSOZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("VSO");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Lombardibarbie@PackersChamps.com",
                            FirstName = "Aaron",
                            ImageLocation = "",
                            LastName = "Rodgers",
                            Lat = 43.066527000000001,
                            Long = -87.914071000000007,
                            PhoneNumber = "9205552020",
                            Rating = 5,
                            VSOCity = "Milwaukee",
                            VSOState = "WI",
                            VSOStreet = "Martin Luther King Dr.",
                            VSOZipCode = 53212
                        },
                        new
                        {
                            Id = 2,
                            Email = "Gunslinger@PackersChamps.com",
                            FirstName = "Brett",
                            ImageLocation = "",
                            LastName = "Farve",
                            Lat = 43.061504999999997,
                            Long = -87.918490000000006,
                            PhoneNumber = "9203332020",
                            Rating = 4,
                            VSOCity = "Milwaukee",
                            VSOState = "WI",
                            VSOStreet = "6th St.",
                            VSOZipCode = 53212
                        },
                        new
                        {
                            Id = 3,
                            Email = "MrHands@PackersChamps.com",
                            FirstName = "Jordy",
                            ImageLocation = "",
                            LastName = "Nelson",
                            Lat = 43.076442,
                            Long = -87.952108999999993,
                            PhoneNumber = "5558675309",
                            Rating = 3,
                            VSOCity = "Milwaukee",
                            VSOState = "WI",
                            VSOStreet = "31st St.",
                            VSOZipCode = 53216
                        },
                        new
                        {
                            Id = 4,
                            Email = "Doubleyourdoublecheck@PackersChamps.com",
                            FirstName = "BJ",
                            ImageLocation = "",
                            LastName = "Raji",
                            Lat = 43.072878000000003,
                            Long = -87.939920000000001,
                            PhoneNumber = "5552344545",
                            Rating = 4,
                            VSOCity = "Milwaukee",
                            VSOState = "Wisconsin",
                            VSOStreet = "22nd St.",
                            VSOZipCode = 53206
                        },
                        new
                        {
                            Id = 5,
                            Email = "Astarrisborn@packerschamps.com",
                            FirstName = "Bart",
                            ImageLocation = "",
                            LastName = "Starr",
                            Lat = 43.065750000000001,
                            Long = -87.933822000000006,
                            PhoneNumber = "5558761515",
                            Rating = 5,
                            VSOCity = "Milwaukee",
                            VSOState = "WI",
                            VSOStreet = "17th St.",
                            VSOZipCode = 53206
                        });
                });

            modelBuilder.Entity("VetRS.Models.Veteran", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VeteranCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VeteranState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VeteranStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VeteranZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Veteran");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Sgtjosetorres@yahoo.com",
                            FirstName = "Jose",
                            ImageLocation = "",
                            LastName = "Torres",
                            Lat = 43.459986999999998,
                            Long = -88.819759000000005,
                            PhoneNumber = "9203827037",
                            VeteranCity = "Beaver Dam",
                            VeteranState = "WI",
                            VeteranStreet = "515 Walnut St",
                            VeteranZipCode = 53916
                        },
                        new
                        {
                            Id = 2,
                            Email = "Thatdude@softwaredeveloper.com",
                            FirstName = "Eric",
                            ImageLocation = "",
                            LastName = "Hill",
                            Lat = 43.041615,
                            Long = -87.936449999999994,
                            PhoneNumber = "5552452010",
                            VeteranCity = "Milwaukee",
                            VeteranState = "WI",
                            VeteranStreet = "Kilbourn Ave",
                            VeteranZipCode = 53233
                        },
                        new
                        {
                            Id = 3,
                            Email = "Realamericanhero@DevDogg.com",
                            FirstName = "Chesty",
                            ImageLocation = "",
                            LastName = "Puller",
                            Lat = 43.038843999999997,
                            Long = -87.905073999999999,
                            PhoneNumber = "1234567891",
                            VeteranCity = "Milwaukee",
                            VeteranState = "WI",
                            VeteranStreet = "W. Wisconsin Ave.",
                            VeteranZipCode = 53202
                        },
                        new
                        {
                            Id = 4,
                            Email = "MedalOfHonor@armyman.com",
                            FirstName = "Lucian",
                            ImageLocation = "",
                            LastName = "Adams",
                            Lat = 43.043458999999999,
                            Long = -87.909976,
                            PhoneNumber = "9201119999",
                            VeteranCity = "Milwaukee",
                            VeteranState = "WI",
                            VeteranStreet = "E. State St.",
                            VeteranZipCode = 53202
                        },
                        new
                        {
                            Id = 5,
                            Email = "RealFlyBoy@airforcehero.com",
                            FirstName = "Steven",
                            ImageLocation = "",
                            LastName = "Bennet",
                            Lat = 43.046976999999998,
                            Long = -87.906662999999995,
                            PhoneNumber = "9998883333",
                            VeteranCity = "Milwaukee",
                            VeteranState = "WI",
                            VeteranStreet = "E. Knapp St.",
                            VeteranZipCode = 53202
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetRS.Models.Education", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("VetRS.Models.Employer", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("VetRS.Models.VSO", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("VetRS.Models.Veteran", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
